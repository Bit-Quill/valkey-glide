import { ConnectionOptions, SocketConnection } from "..";
import RedisServer from "redis-server";
/* eslint-disable @typescript-eslint/no-var-requires */
const FreePort = require("find-free-port");
import { describe, expect, it } from "@jest/globals";
import { runCommonTests } from "./TestUtilities";
import { redis_request } from "../src/ProtobufMessage";
import { BufferWriter, BufferReader } from "protobufjs";
import { v4 as uuidv4 } from "uuid";

type Context = {
    server: RedisServer;
    client: SocketConnection;
};

const PORT_NUMBER = 3000;

async function OpenServerAndExecute(action: (port: number) => Promise<void>) {
    const port = await FreePort(PORT_NUMBER).then(
        ([free_port]: number[]) => free_port
    );
    return new Promise<void>((resolve, reject) => {
        const server = new RedisServer(port);
        server.open(async (err: Error | null) => {
            if (err) {
                reject(err);
            }
            try {
                await action(port);
            } finally {
                server.close();
            }
            resolve();
        });
    });
}

describe("SocketConnection", () => {
    const getAddress = (port: number) => {
        return [{ host: "localhost", port }];
    };

    const getOptions = (port: number): ConnectionOptions => {
        return {
            addresses: getAddress(port),
        };
    };

    it("test protobuf encode/decode delimited", () => {
        // This test is required in order to verify that the autogenerated protobuf
        // files has been corrected and the encoding/decoding works as expected.
        // See "Manually compile protobuf files" in node/README.md to get more info about the fix.
        const writer = new BufferWriter();
        const request = {
            callbackIdx: 1,
            requestType: 2,
            argsArray: redis_request.RedisRequest.ArgsArray.create({
                args: ["bar1", "bar2"],
            }),
        };
        const request2 = {
            callbackIdx: 3,
            requestType: 4,
            argsArray: redis_request.RedisRequest.ArgsArray.create({
                args: ["bar3", "bar4"],
            }),
        };
        redis_request.RedisRequest.encodeDelimited(request, writer);
        redis_request.RedisRequest.encodeDelimited(request2, writer);
        const buffer = writer.finish();
        const reader = new BufferReader(buffer);

        const dec_msg1 = redis_request.RedisRequest.decodeDelimited(reader);
        expect(dec_msg1.callbackIdx).toEqual(1);
        expect(dec_msg1.requestType).toEqual(2);
        expect(dec_msg1.argsArray!.args).toEqual(["bar1", "bar2"]);

        const dec_msg2 = redis_request.RedisRequest.decodeDelimited(reader);
        expect(dec_msg2.callbackIdx).toEqual(3);
        expect(dec_msg2.requestType).toEqual(4);
        expect(dec_msg2.argsArray!.args).toEqual(["bar3", "bar4"]);
    });

    it("set and with return of old value works", async () => {
        await OpenServerAndExecute(async (port) => {
            const client = await SocketConnection.CreateConnection(
                getOptions(port)
            );

            const key = uuidv4();
            // Adding random repetition, to prevent the inputs from always having the same alignment.
            const value = uuidv4() + "0".repeat(Math.random() * 7);

            let result = await client.set(key, value);
            expect(result).toEqual("OK");

            result = await client.set(key, "", {
                returnOldValue: true,
            });
            expect(result).toEqual(value);

            result = await client.get(key);
            expect(result).toEqual("");

            client.dispose();
        });
    });

    it("conditional set works", async () => {
        await OpenServerAndExecute(async (port) => {
            const client = await SocketConnection.CreateConnection(
                getOptions(port)
            );

            const key = uuidv4();
            // Adding random repetition, to prevent the inputs from always having the same alignment.
            const value = uuidv4() + "0".repeat(Math.random() * 7);
            let result = await client.set(key, value, {
                conditionalSet: "onlyIfExists",
            });
            expect(result).toEqual(null);

            result = await client.set(key, value, {
                conditionalSet: "onlyIfDoesNotExist",
            });
            expect(result).toEqual("OK");
            expect(await client.get(key)).toEqual(value);

            result = await client.set(key, "foobar", {
                conditionalSet: "onlyIfDoesNotExist",
            });
            expect(result).toEqual(null);

            result = await client.set(key, "foobar", {
                conditionalSet: "onlyIfExists",
            });
            expect(result).toEqual("OK");

            expect(await client.get(key)).toEqual("foobar");

            client.dispose();
        });
    });

    it("custom command works", async () => {
        await OpenServerAndExecute(async (port) => {
            const client = await SocketConnection.CreateConnection(
                getOptions(port)
            );

            const key = uuidv4();
            // Adding random repetition, to prevent the inputs from always having the same alignment.
            const value = uuidv4() + "0".repeat(Math.random() * 7);
            const setResult = await client.customCommand("SET", [key, value]);
            expect(setResult).toEqual("OK");
            const result = await client.customCommand("GET", [key]);
            expect(result).toEqual(value);

            client.dispose();
        });
    });

    runCommonTests<Context>({
        init: async () => {
            const port = await FreePort(PORT_NUMBER).then(
                ([free_port]: number[]) => free_port
            );
            return new Promise((resolve, reject) => {
                const server = new RedisServer(port);
                server.open(async (err: Error | null) => {
                    if (err) {
                        reject(err);
                    }

                    const client = await SocketConnection.CreateConnection(
                        getOptions(port)
                    );

                    resolve({ client, context: { server, client } });
                });
            });
        },
        close: async (context: Context) => {
            context.server.close();
            context.client.dispose();
        },
    });
});
